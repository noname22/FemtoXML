/* FemtoXML_CPP - A c++ wrapper for FemtoXML
 * FemtoXML - An easy to use XML library
 * 
 * See doc/license.txt for license information (GPLv3)
 * 
 * Authors: 
 * 	Fredrik Hultin, noname@ the domain two lines below, 2007
 *
 * http://nurd.se/~noname/femtoxml
 */

/* create.cpp
 *
 * Example showing how to create XML files using FemtoXML and the C++-wrapper
 */

#include "document.h"

#include <iostream>
#include <stdexcept>

int main(int argc, const char* const* argv)
{
	// Creates a new, empty xml-document
	FemtoXML::Document document;

	if(argc != 2){
		std::cout << "Usage: " << argv[0] << " <output xml file>" << std::endl;
		return 1;
	}

	try{
		// Adds an xml-declaration specifying that we're using xml version 1.0 and
 	   	// our character encoding is UTF-8 
		FemtoXML::Element declaration = document.root().addDeclaration("xml");
		declaration.addAttribute("version", "1.0");
		declaration.addAttribute("encoding", "UTF-8");

		//Adds a comment to the file
		document.root().addComment("This is an XML file generated using the FemtoXML XML library");
	
		// Adds an element with the name "space"
		FemtoXML::Element space = document.root().addElement("space");
	
		// Add an attribute to the space element called "frontier" with the value "the final"
		space.addAttribute("frontier", "the final");

		// Adds a new sub-element to the space-element called "klingons" and adds the text "K'PLAH!" to it
		space.addElement("klingons").addText("K'PLAH!");

		// Adds an element called "ocampa" to the "space"-element 
		FemtoXML::Element ocampa = space.addElement("ocampa");

		// Adds an attribute called "strange" with no value to the "ocampa"-element.
		ocampa.addAttribute("strange");

		// Adds an attribute called "max_age" with value "15" to the "ocampa"-element
		ocampa.addAttribute("max_age", "15");

		// Prints out the XML document on the screen (stdout)
		document.print();

		// Saves the xml-document to an XML-file
		document.save(argv[1]);
	}

	// Catches any exceptions generated by the C++ wrapper 
	// (or the one we're throwing if the file doesn't contain any 'collection'
	catch(std::runtime_error e){
		// Print out what went wrong
		std::cout << e.what() << std::endl;
		return 1;
	}

	return 0;
}

